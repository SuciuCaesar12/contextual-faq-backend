# name: Deploy Backend to AWS Lambda

# on:
#   push:
#     branches: [main]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Install Zip tool
#         uses: montudor/action-zip@v1

#       - name: Create zip file
#         run: cd src && zip -r code.zip .

#       - name: Configure AWS Credentials
#         uses: imehedi/actions-awscli-v2@latest
#         with:
#           args: "lambda update-function-code \
#             --function-name arn:aws:lambda:us-east-1:533267042349:function:ContextualFAQBackend \
#             --zip-file fileb://src/code.zip"

#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: "us-east-1"

name: Deploy FastAPI to AWS Lambda with Updated Layer

on:
  push:
    branches:
      - main

jobs:
  # Step 1: Check if requirements.txt has changed
  check-layer:
    runs-on: ubuntu-latest

    outputs:
      layer_update: ${{ steps.check.outputs.layer_update }}  # Pass the check result to the next jobs

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check if requirements.txt has changed
        id: check  # Define step ID to reference its output
        run: |
          if git diff --quiet HEAD^ HEAD -- requirements.txt; then
            echo "LAYER_UPDATE=false" >> $GITHUB_ENV
            echo "::set-output name=layer_update::false"
          else
            echo "Changes in requirements.txt detected"
            echo "LAYER_UPDATE=true" >> $GITHUB_ENV
            echo "::set-output name=layer_update::true"

  # Step 2: Deploy the Lambda Layer if requirements.txt has changed
  deploy-layer:
    if: ${{ needs.check-layer.outputs.layer_update == 'true' }}  # Check the output from check-layer job
    needs: check-layer  # Ensure this runs after the check-layer job
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Create directories for Lambda Layer
        run: |
          mkdir -p python
          cp -r requirements.txt python/

      - name: Install dependencies into 'python/' directory
        run: |
          pip install -r python/requirements.txt -t python/

      - name: Zip the layer
        run: |
          zip -r layer.zip python/

      - name: Deploy the Layer to AWS
        uses: appleboy/lambda-action@v0.2.0
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          FUNCTION_NAME: "upload-layer-function"
          LAYER_NAME: "fastapi-dependencies-layer"
          zip-file: layer.zip

      - name: Get Latest Layer ARN
        id: get-latest-layer-arn
        run: |
          LATEST_LAYER_ARN=$(aws lambda list-layer-versions --layer-name fastapi-dependencies-layer \
            --query 'LayerVersions[0].LayerVersionArn' --output text)
          echo "LATEST_LAYER_ARN=$LATEST_LAYER_ARN" >> $GITHUB_ENV
          echo "::set-output name=latest_layer_arn::$LATEST_LAYER_ARN"

  # Step 3: Deploy the FastAPI code and attach the updated layer
  deploy-function:
    needs: [check-layer, deploy-layer]  # Wait for both the check and deploy-layer jobs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Package FastAPI for Lambda
        run: |
          mkdir package
          cp -r src/* package/
          cp -r requirements.txt package/

      - name: Zip package (without dependencies)
        run: |
          cd package
          zip -r ../deployment-package.zip .

      - name: Upload to AWS Lambda
        uses: appleboy/lambda-action@v0.2.0
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          FUNCTION_NAME: ContextualFAQBackend
          HANDLER: app.handler
          zip-file: deployment-package.zip

      - name: Attach the Updated Lambda Layer
        if: ${{ needs.check-layer.outputs.layer_update == 'true' }}  # Attach only if the layer was updated
        run: |
          aws lambda update-function-configuration --function-name ContextualFAQBackend \
          --layers ${{ needs.deploy-layer.outputs.latest_layer_arn }}
